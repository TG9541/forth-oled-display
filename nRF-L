\ nRF24L01+ remote console, dynamic payloads, enhanced shockburst
\ Based on Richard's nRF24 library
\ Set UART to 115200 baud, see remarks at the bottom.
\ Communication is lost after "?" abort on PRX

\ Led connected to PC4 / pin 20
\ pin _IRQ on nRF24L01 connected to PB2 / pin 12
\ pin _CE on nRF24L01 connected to PB3 / pin 13
\ pin _CSN connected to PB4 / pin 14
\ SCK =  PB5 / pin 15
\ MOSI = PB6 / pin 16
\ MISO = PB6 / pin 17

\ On PRX:   boot
\ On PTX:   start tmt

#require MARK  
MARK NRF0      \ Mark begin of nRF24 words

#require WIPE

NVM

VARIABLE mb 31 ALLOT \ my buffer
VARIABLE mbi   \ buffer index
VARIABLE PTX?  \ Set role: 0 for remote device, 1 for console

WIPE

\res MCU: STM8L051
\res export PB_ODR PB_DDR PB_CR1 PB_CR2
\res export PC_CR1 PC_CR2 PC_DDR PC_ODR EXTI_CR1
\res export SPI1_CR1 SPI1_CR2 SPI1_ICR
\res export SPI1_SR SPI1_DR CLK_PCKENR1

#require ]B!
#require ]C!
#require WIPE

NVM

#include hw/spi8l.fs

: sup  ( -- )        \ setup pins
   [ 1 PC_DDR 4 ]B!  \ PC4 debug LED output
   [ 1 PC_CR1 4 ]B!  \ set up as push pull
   [ $78 PB_DDR ]C!  \ Port B setup nRF24L01 outputs
   [ $78 PB_CR1 ]C!  \ set up as push pull outputs
   [ $78 PB_CR2 ]C!  \ fast mode outputs
;

: LOn  [ 1 PC_ODR 4 ]B! ;  \ LED on
: LOff [ 0 PC_ODR 4 ]B! ;  \ LED off

: CE.L  ( -- )          \ CE low
   [ 0 PB_ODR 3 ]B!
;

: CE.H  ( -- )          \ CE high
   [ 1 PB_ODR 3 ]B!
;

: CS.L  ( -- )          \ CS low
   [ 0 PB_ODR 4 ]B!
;

: CS.H  ( -- )          \ CS high
   [ 1 PB_ODR 4 ]B!
;

: *10us  ( n -- )  \  delay n * 10us
   1- FOR [
      $A62B ,    \      LD    A,#42
      $4A  C,    \ 1$:  DEC   A
      $26FD ,    \      JRNE  1$
   ] NEXT
;

WIPE

#require ]B!
#require ]C!
#require WIPE

\res MCU: nRF24L01
\res export BIT5
\res export R.CONFIG R.SETUP_RETR R.RF_CH R.RF_SETUP
\res export R.STATUS R.RX_ADDR_P0 R.TX_ADDR R.RX_PW_P0
\res export R_RX_PAYLOAD W_TX_PAYLOAD W_ACK_PAYLOAD
\res export FLUSH_TX FLUSH_RX
\res export R.FEATURE R.DYNPD
\res export R.EN_RXADDR NOP
\res export R_RX_PL_WID R.FIFO_STATUS
\res MCU: STM8L051
\res export  PB_IDR

NVM

\ shift left n bits
: sla  ( c n --- c)  DUP 0= IF 
    DROP ELSE
    0 DO 2 * LOOP 
  THEN
;

\ talk to nRF24L01+ ***************************************

: nSPI ( c -- s)
   CS.L SPI
;

: (nrf@!)  ( c1 -- )
   nSPI DROP
;

: nRF@1  ( c1 -- c2 )  \ fetch the contents of register c1
   (nrf@!) 0 SPI ( c2 )
   CS.H
;

: nRF@n  ( a1 n --- cn....c1  )  \ read n bytes from nRF24 register a1
   SWAP (nRF@!)
   0 DO $AA SPI LOOP
   CS.H
;

: nRF!0  ( c1 -- )  \ send command c1
   nSPI CS.H DROP
;

: nRF!1s  ( c1 c2 -- s)  \ write c1 to register c2
   $20 OR nSPI SWAP ( s c1 ) SPI DROP
   CS.H
;

: nRF!1  ( c1 c2 -- )  \ write c1 to register c2
   nRF!1s DROP
;

: R@Cg  ( -- c1 )  \ fetch config reg
   R.CONFIG  nRF@1
;

: R!Cg  ( c1 -- )  \ write C1 to config reg
   R.CONFIG  nRF!1
;

: fRX  ( -- )
   FLUSH_RX nRF!0
;

: fTX  ( -- )
   FLUSH_TX nRF!0
;

: clI  ( -- )           \ clear all interrupts
   $70  R.STATUS nRF!1     \ 0b01110000
;

: CE.HD  ( -- )         \ set CE high and pause
   CE.H   1 *10us
;

: sRX  ( -- )        \ set as a receiver
   fRX R@Cg 1 OR R!Cg
;

: sTX  ( -- )        \  set as a transmitter
   fTX R@Cg $FE AND R!Cg
;

\ copy c bytes from buffer at a to TX payload and send
: b>tx ( a c --)
   W_TX_PAYLOAD (nrf@!)
   0 DO
      DUP C@ SPI DROP 1+
   LOOP CS.H DROP
   CE.HD CE.L 
;

: rx>bd ( a -- n)  \ copy rx-fifo to buffer at a, return payload width
   R_RX_PL_WID (nRF@!) $AB SPI SWAP OVER      \ get payload width
   CS.H R_RX_PAYLOAD nSPI DROP
   0 DO
      -1 SPI OVER C! 1+
   LOOP  CS.H DROP
;

\ display nRF24 registers, two columns
: regs ( --)
   CR ."       0    1" \ header
   BASE @ >R HEX
   $10 0 DO 
      cr i DUP . nrf@1 5 .R 
      i $10 + nrf@1 5 .R
   LOOP
   R> BASE !
;

: setAir ( ch pwr ar --)   \ channel, power (0-3), air-rate (0-2)
   DUP IF 1- IF 8 ELSE 0 THEN 
   ELSE DROP $20
   THEN SWAP
   3 AND 1 sla OR R.RF_SETUP nrf!1
   R.RF_CH nrf!1
;

\ helper word for spa, set 5 byte pipe address
: hspa   ( a1 a2 a3 a4 a5 p# --)
      R.RX_ADDR_P0 + BIT5 OR (nrf@!)
      5 0 DO SPI DROP LOOP CS.H
;  

\ set address for pipe n
\ Pipe 0 and 1: 5 byte address, the rest: one byte.
\ address pipe 0 and tx-address should be the
\ same for enhanced shockburst
: spa ( msb...lsb n --)
   DUP 2 < IF
      0= IF 
         5 0 DO 4 PICK LOOP   \ dup address
         0 hspa               \ set address pipe 0
         6 hspa               \ set tx address
      ELSE
         1 hspa
      THEN
   ELSE
      R.RX_ADDR_P0 + nRF!1
   THEN
;

WIPE
#require TIB
#require ACCEPT
#require ]B!
#require WIPE
\res MCU: nRF24L01
\res export R.TX_ADDR R.FEATURE R.DYNPD R.SETUP_RETR R.FIFO_STATUS
\res export R.EN_RXADDR BIT5 BIT6 R.STATUS 
\res MCU: STM8L051
\res export INT_EXTI2 EXTI_CR1 PB_CR2 PB_IDR EXTI_SR1 PB_IDR

NVM

#require EVALUATE

\ time out
: Tt ( dt t0 t1 -- f)
   - ABS <
;

\ Receive payload, dynamic width, return payload width and status
: PL.Rd ( a -- n s) \ stores n bytes in buff, n = actual payload width
   rx>bd
   BIT6 R.STATUS nRF!1s  \  Write 1 to clear bit
;

: PL.T ( a n --)                 \ transmit n bytes payload from a
   b>tx                          \ Send Loading tx buffer, drop status reply
   [ $7204 , PB_IDR , $FB C, ]   \ wait for Pb2 IDR go low, TX_DS
   clI
;

: c>mb ( c --)             \ append c to mybuffer and transmit buffer if full
   mbi DUP @ DUP ( c a i i) &32 < IF
      1 ROT +! mb + C!
   ELSE ( c a i)           \ buffer full
      mb swap PL.T ( c a)  \ transmit buffer
      1 SWAP ! mb C!       \ set mbi to 1, store c at index 0
   THEN
;

: txtib ( -- ; text) \ transmit TIB, exit on empty input
                  \ usage: type message, <return>, wait for reply,
                  \ empty <return> to exit
   clI fRX base @ hex
   CR ." : Tx to " R.TX_ADDR 5 nrf@n
   5 0 DO . LOOP base !
   BEGIN
      cr ." #:"
      sTX ce.l
      TIB $20 ACCEPT  DUP IF
         [ 0 PB_CR2 2 ]B!        \ PB2 interrupt disable
         PL.T
         [ 1 PB_CR2 2 ]B!        \ PB2 interrupt enable
         sRX CE.H
         20 TIM                  \ set time out 100 ms
         BEGIN
            2DUP TIM TT          \ time out?
            PB_IDR C@ NOT 4 AND  \ IRQ (PB2) low
            OR
         UNTIL 2DROP
         0
      ELSE 
         2DROP 1
      THEN
   UNTIL
;

\ interrupt service routine: receive message, evaluate, send reply
: isr ( --)
   SAVEC
   PTX? @ IF
      BEGIN
         mb DUP PL.Rd >R
         type
         $E DUP R> AND =            \ RX_FIFO empty
      UNTIL clI                     \ reset RX_DR
      ELSE                          \ PRx
         mb DUP PL.Rd DROP
         0 mbi !
         sTX ce.l
         [ ' c>mb ] LITERAL 'EMIT ! \ pipe output for serial to c>mb
         EVALUATE
         mb mbi @ DUP IF PL.T ELSE 2DROP THEN
         [ ' TX! ] LITERAL 'EMIT !  \ reset emit vector
         sRX CE.H                   \ switch to listen mode, reset TX_DS
   THEN fTX [ 1 EXTI_SR1 2 ]B!      \ clear interrupt flag
   IRET
;

: nRFi  ( ch pwr ar --)    \ init radio: channel, power (0-3), air-rate (0-2)
   sup                     \ set up pins
   CS.H 0 SPIon            \ initialise SPI 8 MHz
   &10000 *10us            \ delay after power-on reset (spec fig. 3)
   setair
   $3F R.EN_RXADDR nRF!1   \ auto acknowledgement for all pipes
   4 R.FEATURE nRF!1       \ Set EN_DPL (enable dynamic payload)
   $3F R.DYNPD nrf!1       \ dynamic payload for all pipes
   fRX fTX clI             \ flush registers, clear interrupts
\   $13 R.SETUP_RETR nrf!1  \ 0.5 ms AutoRetransmitDelay
   $F 0 nrf!1              \ Power up as PRX
                           \  enable nRF24 IRQ interrupt of PB2
   [ $9b C, ]              \ SIM, to enable EXTI_CRx setting
   [ 1 EXTI_CR1 5 ]B!      \ IO-Port A/B/C/D-2 falling edge interrupt
   [ $9A C, ]              \ RIM
   NVM
   [ ' isr ] LITERAL INT_EXTI2 ! \ set Port B int vector
   RAM
   [ 1 PB_CR2 2 ]B!        \ PB2 interrupt enable
;

: start  ( --)
   2 3 1 nRFi           \ channel 2, maximum power, 1 Mbps
;

: rcv ( --) \ start receiving
   0 PTX? !
   sRX CE.H ftx
;

: tmt ( --) \ start transmitting
   1 PTX? !
   sTX CE.L
   txtib
;

\ to start communication on startup: NVM ' boot 'BOOT ! RAM
: boot ( --)
   start rcv
;

WIPE

MARK NRF1

\\
It is all a matter of timing.
Set baudrate to 115200. This can be achieved by replacing the line
        LDW     X,#0x6803       ; 9600 baud
by
        LDW     X,#0x080B       ; 115200 baud
in forth.asm before flashing the board.
Or you could look for AE 11 06 in word COLD and replace it with AE 08 0B.
( in my micro's I did: NVM $80B $814F ! RAM )
Don't forget to adjust e4thcom vocation ( -b B115200)
With these settings I can send a complete flash dump.

For a cheap way to improve the range, see:
https://www.instructables.com/id/Enhanced-NRF24L01/

